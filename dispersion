#!/bin/bash
# Dispersion is a lightweight and simple parallel SSH execution tool.
# Created and maintained by Ross McDonald, mcdonaldrossc@gmail.com

function display_banner {
    printf "     _ _____ ___________ ___________  _____ _____ _____ _   _ \n"
    printf "    | |_   _/  ___| ___ \  ___| ___ \/  ___|_   _|  _  | \ | |\n"
    printf "  __| | | | \\ \`--.| |_/ / |__ | |_/ /\\ \`--.  | | | | | |  \\| |\n"
    printf " / _\` | | |  \`--. \\  __/|  __||    /  \`--. \\ | | | | | | . \` |\n"
    printf "| (_| |_| |_/\\__/ / |   | |___| |\\ \ /\\__/ /_| |_\\ \\_/ / |\\  |\n"
    printf " \\__,_|\\___/\\____/\\_|   \\____/\\_| \\_|\\____/ \\___/ \\___/\\_| \\_/\n"
    printf "\t\t\t\tthe parallel execution engine.\n\n"
}

function usage {
    printf "\nusage: dispersion [options] <hosts file> <script to run>\n"
    printf "options:\n"
    printf "\t-k\tkey file to use for SSH connection.\n"
    printf "\t-b\tsend dispersion to the background.\n"
    printf "\t-p\tprompt for password when connecting over SSH.\n"
    printf "\t-s\tspecify the use of sudo commands.\n"
    printf "\n"
}

function handle_cli {
    key_specified=false
    background=false
    password_prompt=false
    require_sudo=false
    while getopts k:bpsh opt; do
        case $opt in
            k)
            key_specified=true
            key_file="$OPTARG"
            # dispersion will look for key file by default, can also specify.
            ;;
            b)
            background=true
            printf "sending dispersion to the background...\n"
            # for dispersion, sending everything to the background
            ;;
            p)
            password_prompt=true
            printf "will prompt for password when connecting...\n"
            # prompt for a password instead of using SSH keys
            ;;
            s)
            require_sudo=true
            printf "will use sudo commands when executing...\n"
            # prompt for a password instead of using SSH keys
            ;;
            h)
            usage
            exit 1
            ;;
            \?)
            usage
            exit 1
            ;;
        esac
    done
    shift $((OPTIND - 1))

    hosts_file="$1"
    script="$2"
}

function exception {
    printf "!! exception -> $@\n"
    exit 1
}

function msg {
    printf "$@\n"
    return 0
}

function verify_hosts_file {
    if [ -z $hosts_file ]; then
        usage
        exception "no host file specified."
    fi
    msg "verifying hosts file: $hosts_file"
    test -f $hosts_file &>/dev/null || exception "host file does not exist."
    test -r $hosts_file &>/dev/null || exception "host file is not readable."
    return 0
}

function verify_script {
    if [ -z $script ]; then
        usage
        exception "no script specified."
    fi
    msg "verifying script: $script"
    test -f $script &>/dev/null || exception "$script does not exist."
    test -x $script &>/dev/null || exception "$script is not executable."
    return 0
}

function verify_configuration {
    msg "verifying configuration..."
    
    echo "key_specified=$key_specified"
    if [ $key_specified = "true" ]; then
        if [ $password_prompt = "true" ]; then
            exception "cannot use both password and key file, please choose one"
        fi
        if [ ! -f $key_file ]; then
            exception "key file specified does not exist."
        fi
        printf "\tkey specified, will be using: $key_file\n"
    fi
    
    if [ $password_prompt = "true" ]; then
        printf "will prompt for password when connecting...\n"
    fi
    
    verify_hosts_file
    verify_script
    which ssh &>/dev/null || exception "ssh is not installed."
    return 0
}

function ssh_test {
    printf "\t\tverifying ssh connection is valid..."
    ssh_command="ssh -i $key_file -T -o StrictHostKeyChecking=false"
    $ssh_command $1 'hostname -f' &>$1.log
    if [ $? -eq 0 ]; then
        printf " valid.\n"
        return 0
    else
        printf " invalid.\n"
        return 1
    fi
}

function disperse {
    for host in $(cat $hosts_file); do
        msg "dispersing to $host..."
        if [ key_specified = "false" ]; then
            for key_file in $(grep --mmap -R "BEGIN.*PRIVATE KEY" ~/.ssh/ | sed s/':'/' '/ | awk '{ print $1 }'); do
                msg "\tno SSH key specified, trying $key_file"
                ssh_test $host && break
            done
        fi
        ssh_options="-T -i $key_file -o StrictHostKeyChecking=false"
        if [ require_sudo = "true" ]; then
            ssh_command="ssh $ssh_options $host \'sudo /bin/bash -s\' < $script &>$host.log"
        else
            ssh_command="ssh $ssh_options $host \'/bin/bash -s\' < $script &>$host.log"
        fi
        eval "($ssh_command; echo $? >> $host.log) &"
        local pid=$!
        msg "\tforked, pid=$pid"
        printf "%s\n" $pid > $host.pid
    done
    return 0
}

function maintain {
    printf "waiting for scripts to finish."
    stay_awake=true
    while [ $stay_awake = "true" ]; do
        stay_awake=false
        for pid_file in $(ls -l | awk '/pid/ { print $9 }'); do
            local pid="$(cat $pid_file)"
            ps -p $pid &>/dev/null
            if [ $? -ne 0 ]; then
                rm -f $pid_file
            else
                stay_awake=true
            fi
        done
        sleep 5
        printf "."
    done
    msg " done."
    return 0
}

function conclude {
    msg "gathering results..."
    for host in $(cat $hosts_file); do
        local ret_val=$(tail -n1 $host.log)
        if [ $ret_val -ne 0 ]; then
            msg "\twarning! host $host finished with a non-zero return code..."
        else
            msg "\thost $host returned successfully..."
        fi
    done
    return 0
}

function main {
    display_banner
    handle_cli $@    
    verify_configuration
    disperse
    maintain
    conclude    
    return 0
}

main $@

exit 0